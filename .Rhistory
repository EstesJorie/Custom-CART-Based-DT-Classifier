geom_density(data = mushroomDataSK, aes(x = min_samples_split, fill = "Mushroom SK"), alpha = 0.4) +
labs( x = "Min Samples Split", y = "Precision",
colour = "Dataset", fill = "Dataset") +
theme_minimal() +
scale_colour_manual(values = distinctColours) +
scale_fill_manual(values = distinctColours)
print(allDataPlot)
View(mushroomData)
irisData$dataset <- "Iris_Data"
irisDataSK$dataset <- "Iris_Data_SKLearn"
mushroomData$dataset <- "Mushroom_Data"
mushroomDataSK$dataset <- "Mushroom_Data_SKLearn"
allData <- rbind(irisData, irisDataSK, mushroomData, mushroomDataSK)
ggplot(allData, aes(x = time_taken, y = accuracy, colour = dataset, group = dataset)) +
geom_line(linewidth = 1) +
geom_point(size = 1.5, alpha = 0.6) +
labs(x = "Time Taken (s)", y = "Accuracy") +
scale_colour_manual(name = "Dataset", values = c("Iris_Data" = "blue",
"Iris_Data_SKLearn" = "red",
"Mushroom_Data" = "green",
"Mushroom_Data_SKLearn" = "purple")) +
theme_minimal() + coord_cartesian(xlim = c(0, 10))
irisData$dataset <- "Iris_Data"
irisDataSK$dataset <- "Iris_Data_SKLearn"
mushroomData$dataset <- "Mushroom_Data"
mushroomDataSK$dataset <- "Mushroom_Data_SKLearn"
allData <- rbind(irisData, irisDataSK, mushroomData, mushroomDataSK)
ggplot(allData, aes(x = time_taken, y = accuracy, colour = dataset, group = dataset)) +
geom_line(linewidth = 1) +
geom_point(size = 1.5, alpha = 0.6) +
labs(x = "Time Taken (s)", y = "Accuracy") +
scale_colour_manual(name = "Dataset", values = c("Iris_Data" = "blue",
"Iris_Data_SKLearn" = "red",
"Mushroom_Data" = "green",
"Mushroom_Data_SKLearn" = "purple")) +
theme_minimal() + coord_cartesian(xlim = c(0, 2))
if(!('tidyverse'%in%installed.packages()))install.packages('tidyverse')
if(!('Metrics'%in%installed.packages())) install.packages('Metrics')
if(!('ggplot2'%in%installed.packages())) install.packages('ggplot2')
if(!('here'%in%installed.packages())) install.packages('here')
if(!('grid'%in%installed.packages())) install.packages('grid')
if(!('gridExtra'%in%installed.packages())) install.packages('gridExtra')
if(!('RColorBrewer'%in%installed.packages())) install.packages('RColorBrewer')
library(tidyverse)
library(Metrics)
library(ggplot2)
library(here)
library(grid)
library(gridExtra)
library(RColorBrewer)
irisData <- read.csv(here("irisClassifier.csv")) %>% na.omit() %>%  filter(!if_any(everything(), ~ . %in% c('Iris-setosa', 'Iris-versicolor', 'Iris-virginica', 'macro avg', 'weighted avg')))
irisDataSK <- read.csv(here("irisSKLearn.csv")) %>% na.omit() %>%  filter(!if_any(everything(), ~ . %in% c('Iris-setosa', 'Iris-versicolor', 'Iris-virginica', 'macro avg', 'weighted avg')))
mushroomData <- read.csv(here("mushroomClassifier.csv")) %>% na.omit()
mushroomDataSK <- read.csv(here("mushroomSKLearn.csv"))
irisBoxplot <- ggplot(data = irisData, aes(x = factor(min_samples_split), y = f1_score)) +
geom_boxplot() + theme_minimal() + coord_cartesian(xlim = c(0, 15), ylim = c(0, 1)) +
labs(x = "Min Samples Split", y = "F1 Score")
irisSKBoxplot <- ggplot(data = irisDataSK, aes(x = factor(min_samples_split), y = f1_score)) + geom_boxplot() + theme_minimal() + coord_cartesian(xlim = c(0, 15), ylim = c(0, 1)) +
labs(x = "Min Samples Split", y = "F1 Score")
irisBoxplot
irisSKBoxplot
irisData$dataset <- "Iris Data"
irisDataSK$dataset <- "Iris Data SK"
mushroomData$dataset <- "Mushroom Data"
mushroomDataSK$dataset <- "Mushroom Data SK"
allData <- rbind(irisData, irisDataSK, mushroomData, mushroomDataSK)
ggplot(allData, aes(x = time_taken, y = accuracy, colour = dataset, group = dataset)) +
geom_line(linewidth = 1) +
geom_point(size = 1.5, alpha = 0.6) +
labs(x = "Time Taken (s)", y = "Accuracy") +
scale_colour_manual(name = "Dataset", values = c("Iris_Data" = "blue",
"Iris_Data_SK" = "red",
"Mushroom_Data" = "green",
"Mushroom_Data_SK" = "purple")) +
theme_minimal() + coord_cartesian(xlim = c(0, 2))
irisData$dataset <- "Iris Data"
irisDataSK$dataset <- "Iris Data SK"
mushroomData$dataset <- "Mushroom Data"
mushroomDataSK$dataset <- "Mushroom Data SK"
allData <- rbind(irisData, irisDataSK, mushroomData, mushroomDataSK)
ggplot(allData, aes(x = time_taken, y = accuracy, colour = dataset, group = dataset)) +
geom_line(linewidth = 1) +
geom_point(size = 1.5, alpha = 0.6) +
labs(x = "Time Taken (s)", y = "Accuracy") +
scale_colour_manual(name = "Dataset", values = c("Iris Data" = "blue",
"Iris Data SK" = "red",
"Mushroom Data" = "green",
"Mushroom Data SK" = "purple")) +
theme_minimal() + coord_cartesian(xlim = c(0, 2))
irisData$dataset <- "Iris Data"
irisDataSK$dataset <- "Iris Data SK"
mushroomData$dataset <- "Mushroom Data"
mushroomDataSK$dataset <- "Mushroom Data SK"
allData <- rbind(irisData, irisDataSK, mushroomData, mushroomDataSK)
ggplot(allData, aes(x = time_taken, y = accuracy, colour = dataset, group = dataset)) +
geom_line(linewidth = 1) +
geom_point(size = 1.5, alpha = 0.4) +
labs(x = "Time Taken (s)", y = "Accuracy") +
scale_colour_manual(name = "Dataset", values = c("Iris Data" = "blue",
"Iris Data SK" = "red",
"Mushroom Data" = "green",
"Mushroom Data SK" = "purple")) +
theme_minimal() + coord_cartesian(xlim = c(0, 2))
irisData$dataset <- "Iris Data"
irisDataSK$dataset <- "Iris Data SK"
mushroomData$dataset <- "Mushroom Data"
mushroomDataSK$dataset <- "Mushroom Data SK"
allData <- rbind(irisData, irisDataSK, mushroomData, mushroomDataSK)
ggplot(allData, aes(x = time_taken, y = accuracy, colour = dataset, group = dataset)) +
geom_line(linewidth = .5) +
geom_point(size = 1.5, alpha = 0.4) +
labs(x = "Time Taken (s)", y = "Accuracy") +
scale_colour_manual(name = "Dataset", values = c("Iris Data" = "blue",
"Iris Data SK" = "red",
"Mushroom Data" = "green",
"Mushroom Data SK" = "purple")) +
theme_minimal() + coord_cartesian(xlim = c(0, 2))
irisData$dataset <- "Iris Data"
irisDataSK$dataset <- "Iris Data SK"
mushroomData$dataset <- "Mushroom Data"
mushroomDataSK$dataset <- "Mushroom Data SK"
allData <- rbind(irisData, irisDataSK, mushroomData, mushroomDataSK)
ggplot(allData, aes(x = time_taken, y = accuracy, colour = dataset, group = dataset)) +
geom_line(linewidth = .5) +
geom_point(size = 1.5, alpha = 0.4) +
labs(x = "Time Taken (s)", y = "Accuracy") +
scale_colour_manual(name = "Dataset", values = c("Iris Data" = "#6CBEED",
"Iris Data SK" = "#FFD131",
"Mushroom Data" = "#5CF64A",
"Mushroom Data SK" = "#947CBD")) +
theme_minimal() + coord_cartesian(xlim = c(0, 2))
scatterPlot <- ggplot() +
geom_jitter(data = irisData, aes(x = min_samples_split, y = precision, color = "Iris"), alpha = 0.6, width = 0.1) +
geom_jitter(data = irisDataSK, aes(x = min_samples_split, y = precision, color = "Iris SK"), alpha = 0.6, width = 0.1) +
geom_jitter(data = mushroomData, aes(x = min_samples_split, y = precision, color = "Mushroom"), alpha = 0.6, width = 0.1) +
geom_jitter(data = mushroomDataSK, aes(x = min_samples_split, y = precision, color = "Mushroom SK"), alpha = 0.6, width = 0.1) +
labs(x = "Min Samples Split", y = "Precision") +
theme_minimal() +
scale_color_manual(values = distinctColours)
print(scatterPlot)
distinctColours2 = brewer.pal(6, "Dark2")
scatterPlot <- ggplot() +
geom_jitter(data = irisData, aes(x = min_samples_split, y = precision, color = "Iris"), alpha = 0.6, width = 0.1) +
geom_jitter(data = irisDataSK, aes(x = min_samples_split, y = precision, color = "Iris SK"), alpha = 0.6, width = 0.1) +
geom_jitter(data = mushroomData, aes(x = min_samples_split, y = precision, color = "Mushroom"), alpha = 0.6, width = 0.1) +
geom_jitter(data = mushroomDataSK, aes(x = min_samples_split, y = precision, color = "Mushroom SK"), alpha = 0.6, width = 0.1) +
labs(x = "Min Samples Split", y = "Precision") +
theme_minimal() +
scale_color_manual(values = distinctColours)
print(scatterPlot)
distinctColours2 = brewer.pal(6, "Dark2")
scatterPlot <- ggplot() +
geom_jitter(data = irisData, aes(x = min_samples_split, y = precision, color = "Iris"), alpha = 0.6, width = 0.1) +
geom_jitter(data = irisDataSK, aes(x = min_samples_split, y = precision, color = "Iris SK"), alpha = 0.6, width = 0.1) +
geom_jitter(data = mushroomData, aes(x = min_samples_split, y = precision, color = "Mushroom"), alpha = 0.6, width = 0.1) +
geom_jitter(data = mushroomDataSK, aes(x = min_samples_split, y = precision, color = "Mushroom SK"), alpha = 0.6, width = 0.1) +
labs(x = "Min Samples Split", y = "Precision") +
theme_minimal() +
scale_color_manual(values = distinctColours2)
print(scatterPlot)
distinctColours2 = brewer.pal(6, "Set1")
scatterPlot <- ggplot() +
geom_jitter(data = irisData, aes(x = min_samples_split, y = precision, color = "Iris"), alpha = 0.6, width = 0.1) +
geom_jitter(data = irisDataSK, aes(x = min_samples_split, y = precision, color = "Iris SK"), alpha = 0.6, width = 0.1) +
geom_jitter(data = mushroomData, aes(x = min_samples_split, y = precision, color = "Mushroom"), alpha = 0.6, width = 0.1) +
geom_jitter(data = mushroomDataSK, aes(x = min_samples_split, y = precision, color = "Mushroom SK"), alpha = 0.6, width = 0.1) +
labs(x = "Min Samples Split", y = "Precision") +
theme_minimal() +
scale_color_manual(values = distinctColours2)
print(scatterPlot)
View(allDataPlot)
View(allData)
distinctColours2 = brewer.pal(6, "Set1")
scatterPlot <- ggplot() +
geom_jitter(data = irisData, aes(x = min_samples_split, y = recall, color = "Iris"), alpha = 0.6, width = 0.1) +
geom_jitter(data = irisDataSK, aes(x = min_samples_split, y = recall, color = "Iris SK"), alpha = 0.6, width = 0.1) +
geom_jitter(data = mushroomData, aes(x = min_samples_split, y = recall, color = "Mushroom"), alpha = 0.6, width = 0.1) +
geom_jitter(data = mushroomDataSK, aes(x = min_samples_split, y = recall, color = "Mushroom SK"), alpha = 0.6, width = 0.1) +
labs(x = "Min Samples Split", y = "Precision") +
theme_minimal() +
scale_color_manual(values = distinctColours2)
print(scatterPlot)
summary(allData)
numericCols <- allData %>% select(-dataset) %>% summarise_all((funs(mean, sd)))
print(numericCols)
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= mean, sd = sd)))
print(numericCols)
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= mean, sd = sd)))
print(numericCols)
corMatrix <- cor(allData %>% select(-dataset))
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= mean, sd = sd)))
print(numericCols)
corMatrix <- cor(allData %>% select_if(is.numeric))
print(corMatrix)
corMatrix <- cor(allData %>% select_if(is.numeric))
print(corMatrix)
if(!('tidyverse'%in%installed.packages()))install.packages('tidyverse')
if(!('Metrics'%in%installed.packages())) install.packages('Metrics')
if(!('ggplot2'%in%installed.packages())) install.packages('ggplot2')
if(!('here'%in%installed.packages())) install.packages('here')
if(!('grid'%in%installed.packages())) install.packages('grid')
if(!('gridExtra'%in%installed.packages())) install.packages('gridExtra')
if(!('RColorBrewer'%in%installed.packages())) install.packages('RColorBrewer')
if(!('corrplot'%in%installed.packages())) install.packages('corrplot')
library(tidyverse)
library(Metrics)
library(ggplot2)
library(here)
library(grid)
library(gridExtra)
library(RColorBrewer)
library(corrplot)
irisData <- read.csv(here("irisClassifier.csv")) %>% na.omit() %>%  filter(!if_any(everything(), ~ . %in% c('Iris-setosa', 'Iris-versicolor', 'Iris-virginica', 'macro avg', 'weighted avg')))
irisDataSK <- read.csv(here("irisSKLearn.csv")) %>% na.omit() %>%  filter(!if_any(everything(), ~ . %in% c('Iris-setosa', 'Iris-versicolor', 'Iris-virginica', 'macro avg', 'weighted avg')))
mushroomData <- read.csv(here("mushroomClassifier.csv")) %>% na.omit()
mushroomDataSK <- read.csv(here("mushroomSKLearn.csv"))
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= mean, sd = sd)))
print(numericCols)
corMatrix <- cor(allData %>% select_if(is.numeric))
print(corMatrix)
corrplot(corMatrix, method='circle', type='upper', order='hclust')
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= mean, sd = sd)))
print(numericCols)
corMatrix <- cor(allData %>% select_if(is.numeric))
print(corMatrix)
corrplot(corMatrix, method='square', type='upper', order='hclust')
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= ~mean(.), sd = ~sd(.))))
print(numericCols)
corMatrix <- cor(allData %>% select_if(is.numeric))
print(corMatrix)
corrplot(corMatrix, method='square', type='upper', order='hclust')
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= ~mean(.), sd = ~sd(.))))
print(numericCols)
corMatrix <- cor(allData %>% select_if(is.numeric))
print(corMatrix)
corrplot(corMatrix, method='square', order='hclust')
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= ~mean(.), sd = ~sd(.))))
print(numericCols)
corMatrix <- cor(allData %>% select_if(is.numeric))
print(corMatrix)
corrplot(corMatrix, method='circle', order='hclust')
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= ~mean(.), sd = ~sd(.))))
numericCols <- numericCols %>%
pivot_longer(cols = everything(),
names_to = c("variable", "statistic"),
names_pattern = "(.*)_(.*)",
values_to = "value")
corMatrix <- cor(allData %>% select_if(is.numeric))
print(corMatrix)
corrplot(corMatrix, method='circle', order='hclust')
ggplot(numericCols_long, aes(x = variable, y = value, fill = statistic)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Summary Statistics for Numeric Columns",
x = "Variable",
y = "Value",
fill = "Statistic") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= ~mean(.), sd = ~sd(.))))
numericCols <- numericCols %>%
pivot_longer(cols = everything(),
names_to = c("variable", "statistic"),
names_pattern = "(.*)_(.*)",
values_to = "value")
corMatrix <- cor(allData %>% select_if(is.numeric))
print(corMatrix)
corrplot(corMatrix, method='circle', order='hclust')
ggplot(numericCols, aes(x = variable, y = value, fill = statistic)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Summary Statistics for Numeric Columns",
x = "Variable",
y = "Value",
fill = "Statistic") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= ~mean(.), sd = ~sd(.))))
numericCols <- numericCols %>%
pivot_longer(cols = everything(),
names_to = c("variable", "statistic"),
names_pattern = "(.*)_(.*)",
values_to = "value")
corMatrix <- cor(allData %>% select_if(is.numeric))
print(corMatrix)
corrplot(corMatrix, method='circle', order='hclust')
ggplot(numericCols, aes(x = variable, y = value, color = statistic)) +
geom_point(size = 4, position = position_dodge(width = 0.8)) +  # Position points next to each other
labs(title = "Dot Plot of Mean and SD for Numeric Variables",
x = "Variable",
y = "Value",
color = "Statistic") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= ~mean(.), sd = ~sd(.))))
numericCols <- numericCols %>%
pivot_longer(cols = everything(),
names_to = c("variable", "statistic"),
names_pattern = "(.*)_(.*)",
values_to = "value")
corMatrix <- cor(allData %>% select_if(is.numeric))
print(corMatrix)
corrplot(corMatrix, method='circle', order='hclust')
ggplot(numericCols, aes(x = variable, y = value, color = statistic)) +
geom_point(size = 4, position = position_dodge(width = 0.8)) +  # Position points next to each other
labs(x = "Variable",
y = "Value",
color = "Statistic") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
ggplot(numericCols %>% filter(statistic == "mean"), aes(x = variable, y = value)) +
geom_point(size = 4, color = "blue") +  # Mean points in blue
geom_errorbar(aes(ymin = value - sd, ymax = value + sd), width = 0.2, color = "red") +  # SD error bars in red
labs(title = "Error Bar Plot: Mean ± SD",
x = "Variable",
y = "Mean Value with SD Error Bars") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= ~mean(.), sd = ~sd(.))))
numericCols <- numericCols %>%
pivot_longer(cols = everything(),
names_to = c("variable", "statistic"),
names_pattern = "(.*)_(.*)",
values_to = "value")
corMatrix <- cor(allData %>% select_if(is.numeric))
corrPlot <- corrplot(corMatrix, method='circle', order='hclust')
dotPlot <- ggplot(numericCols, aes(x = variable, y = value, color = statistic)) +
geom_point(size = 4, position = position_dodge(width = 0.8)) +  # Position points next to each other
labs(x = "Variable",
y = "Value",
color = "Statistic") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
lmModel <- lm(accuracy ~ min_samples_split + max_depth + time_taken + memory_used, data = allData)
summary(lmModel)
lmModel <- lm(accuracy ~ min_samples_split + max_depth + time_taken + memory_used, data = allData)
ggplot(data, aes(x = minsamplessplit, y = accuracy)) +
geom_point() +
geom_smooth(method = "lm", color = "red") +
labs(title = "Regression of Accuracy on Min Samples Split", x = "Min Samples Split", y = "Accuracy")
lmModel <- lm(accuracy ~ min_samples_split + max_depth + time_taken + memory_used, data = allData)
ggplot(allData, aes(x = minsamplessplit, y = accuracy)) +
geom_point() +
geom_smooth(method = "lm", color = "red") +
labs(title = "Regression of Accuracy on Min Samples Split", x = "Min Samples Split", y = "Accuracy")
lmModel <- lm(accuracy ~ min_samples_split + max_depth + time_taken + memory_used, data = allData)
ggplot(allData, aes(x = min_samples_split, y = accuracy)) +
geom_point() +
geom_smooth(method = "lm", color = "red") +
labs(title = "Regression of Accuracy on Min Samples Split", x = "Min Samples Split", y = "Accuracy")
lmModel <- lm(accuracy ~ min_samples_split + max_depth + time_taken + memory_used, data = allData)
ggplot(allData, aes(x = min_samples_split, y = accuracy)) +
geom_point() +
geom_smooth(method = "lm", color = "red") +
labs(title = "Regression of Accuracy on Min Samples Split", x = "Min Samples Split", y = "Accuracy")
lmModel <- lm(accuracy ~ min_samples_split + max_depth + time_taken + memory_used, data = allData)
lmVis <- ggplot(allData, aes(x = min_samples_split, y = accuracy)) +
geom_point() +
geom_smooth(method = "lm", color = "red") +
labs(title = "Regression of Accuracy on Min Samples Split", x = "Min Samples Split", y = "Accuracy")
print(lmVis)
View(lmVis)
lmModel <- lm(accuracy ~ min_samples_split + max_depth + time_taken + memory_used, data = allData)
lmVis <- ggplot(allData, aes(x = min_samples_split, y = accuracy)) +
geom_point() +
geom_smooth(method = "lm", color = "red") +
labs(title = "Regression of Accuracy on Min Samples Split", x = "Min Samples Split", y = "Accuracy")
lmModel <- lm(accuracy ~ min_samples_split + max_depth + time_taken + memory_used, data = allData)
# Visualize the regression with ggplot2
lmVis <- ggplot(allData, aes(x = min_samples_split, y = accuracy)) +
geom_point(aes(color = accuracy), size = 3, alpha = 0.7) +  # Add points with color based on accuracy
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Add a regression line in red with confidence intervals
labs(title = "Regression of Accuracy on Min Samples Split",
x = "Min Samples Split",
y = "Accuracy") +
theme_minimal() +  # A cleaner theme
theme(legend.position = "none")  # Remove the legend if not needed
# Print the plot
print(lmVis)
print(lmVis)
anovaAcc <- aov(accuracy ~ dataset, data = allData)
anovaF1 <- aov(f1_score ~ dataset, data = allData)
summary(anovaAcc, anovaF1)
anovaAcc <- aov(accuracy ~ dataset, data = allData)
anovaF1 <- aov(f1_score ~ dataset, data = allData)
summary(anovaAcc)
anovaAcc <- aov(accuracy ~ dataset, data = allData)
anovaF1 <- aov(f1_score ~ dataset, data = allData)
summary(anovaAcc)
summary(anovaF1)
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= ~mean(.), sd = ~sd(.))))
numericCols <- numericCols %>%
pivot_longer(cols = everything(),
names_to = c("variable", "statistic"),
names_pattern = "(.*)_(.*)",
values_to = "value")
corMatrix <- cor(allData %>% select_if(is.numeric))
summary(corMatrix)
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= ~mean(.), sd = ~sd(.))))
numericCols <- numericCols %>%
pivot_longer(cols = everything(),
names_to = c("variable", "statistic"),
names_pattern = "(.*)_(.*)",
values_to = "value")
corMatrix <- cor(allData %>% select_if(is.numeric))
summary(cor(allData %>% select_if(is.numeric)))
summary(cor(allData %>% select_if(is.numeric)))
numericCols <- allData %>% select(-dataset) %>% summarise_all((list(mean= ~mean(.), sd = ~sd(.))))
numericCols <- numericCols %>%
pivot_longer(cols = everything(),
names_to = c("variable", "statistic"),
names_pattern = "(.*)_(.*)",
values_to = "value")
corMatrix <- cor(allData %>% select_if(is.numeric))
corrplot(corMatrix, method='circle', order='hclust')
print(corMatrix
)
summary(anovaAcc)
summary(anovaF1)
anovaIris <- aov(accuracy ~ f1_score, data=irisData)
anovaAcc <- aov(accuracy ~ dataset, data = allData)
anovaF1 <- aov(f1_score ~ dataset, data = allData)
summary(anovaAcc)
summary(anovaF1)
summary(anovaIris)
summary(anovaIrisAcc)
anovaIris <- aov(f1_score ~ min_samples_split, data=irisData)
anovaIrisAcc <- aov(accuracy ~ min_samples_split, data=irisData)
anovaIrisSK <- aov(f1_score ~ min_samples_split, data=irisDataSK)
anovaIrisSKAcc <- aov(accuracy ~ min_samples_split, data=irisDataSK)
anovaMushroom <- aov(f1_score ~ min_samples_split, data=mushroomData)
anovaMushroomAcc <- aov(accuracy ~ min_samples_split, data=mushroomData)
anovaMushroomSK <- aov(f1_score ~ min_samples_split, data=mushroomDataSK)
anovaMushroomSKAcc <- aov(accuracy ~ min_samples_split, data=mushroomDataSK)
anovaAcc <- aov(accuracy ~ dataset, data = allData)
anovaF1 <- aov(f1_score ~ dataset, data = allData)
summary(anovaAcc)
summary(anovaF1)
summary(anovaIris)
summary(anovaIrisAcc)
summary(anovaIrisSK)
summary(anovaIrisSKAcc)
summary(anovaMushroom)
summary(anovaMushroomAcc)
summary(anovaMushroomSK)
summary(anovaMushroomSKAcc)
summary(anovaAcc)
summary(anovaF1)
summary(anovaIris)
summary(anovaIrisAcc)
summary(anovaIrisSK)
summary(anovaIrisSKAcc)
summary(anovaMushroom)
summary(anovaMushroomAcc)
summary(anovaMushroomSK)
summary(anovaMushroomSKAcc)
summary(median(allData))
medianVal <- allData %>% select(-dataset) %>% summarise_all(median)
anovaIris <- aov(f1_score ~ min_samples_split, data=irisData)
anovaIrisAcc <- aov(accuracy ~ min_samples_split, data=irisData)
anovaIrisSK <- aov(f1_score ~ min_samples_split, data=irisDataSK)
anovaIrisSKAcc <- aov(accuracy ~ min_samples_split, data=irisDataSK)
anovaMushroom <- aov(f1_score ~ min_samples_split, data=mushroomData)
anovaMushroomAcc <- aov(accuracy ~ min_samples_split, data=mushroomData)
anovaMushroomSK <- aov(f1_score ~ min_samples_split, data=mushroomDataSK)
anovaMushroomSKAcc <- aov(accuracy ~ min_samples_split, data=mushroomDataSK)
anovaAcc <- aov(accuracy ~ dataset, data = allData)
anovaF1 <- aov(f1_score ~ dataset, data = allData)
summary(anovaAcc)
summary(anovaF1)
summary(anovaIris)
summary(anovaIrisAcc)
summary(anovaIrisSK)
summary(anovaIrisSKAcc)
summary(anovaMushroom)
summary(anovaMushroomAcc)
summary(anovaMushroomSK)
summary(anovaMushroomSKAcc)
print(medianVal)
summary_df <- data.frame(
SummaryType = c("anovaAcc", "anovaF1", "anovaIris", "anovaIrisAcc",
"anovaIrisSK", "anovaIrisSKAcc", "anovaMushroom",
"anovaMushroomAcc", "anovaMushroomSK", "anovaMushroomSKAcc",
"MedianValues"),
Summary = c(
paste(capture.output(summary(anovaAcc)), collapse="\n"),
paste(capture.output(summary(anovaF1)), collapse="\n"),
paste(capture.output(summary(anovaIris)), collapse="\n"),
paste(capture.output(summary(anovaIrisAcc)), collapse="\n"),
paste(capture.output(summary(anovaIrisSK)), collapse="\n"),
paste(capture.output(summary(anovaIrisSKAcc)), collapse="\n"),
paste(capture.output(summary(anovaMushroom)), collapse="\n"),
paste(capture.output(summary(anovaMushroomAcc)), collapse="\n"),
paste(capture.output(summary(anovaMushroomSK)), collapse="\n"),
paste(capture.output(summary(anovaMushroomSKAcc)), collapse="\n"),
paste(capture.output(medianVal), collapse="\n")
)
)
# View the combined summaries
print(summary_df)
summaries <- list(
anovaAcc = summary(anovaAcc),
anovaF1 = summary(anovaF1),
anovaIris = summary(anovaIris),
anovaIrisAcc = summary(anovaIrisAcc),
anovaIrisSK = summary(anovaIrisSK),
anovaIrisSKAcc = summary(anovaIrisSKAcc),
anovaMushroom = summary(anovaMushroom),
anovaMushroomAcc = summary(anovaMushroomAcc),
anovaMushroomSK = summary(anovaMushroomSK),
anovaMushroomSKAcc = summary(anovaMushroomSKAcc),
medianVal = medianVal
)
summaries
